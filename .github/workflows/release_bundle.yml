name: Build release bundle (backend+frontend)

on:
  push:
    tags: ["v*"]

permissions:
  contents: write

jobs:
  build-bundle:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            os_tag: linux
            py_ver: "3.11"
          - os: macos-latest
            os_tag: macos
            py_ver: "3.11"
          - os: windows-latest
            os_tag: windows
            py_ver: "3.11"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---------- Frontend build ----------
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Build frontend
        working-directory: frontend
        run: |
          npm ci
          npm run build

      # ---------- Backend (PyInstaller) ----------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py_ver }}

      - name: Build backend binary
        working-directory: backend
        shell: bash
        run: |
          python -c "import importlib.metadata as md; \
          print('QUART_VERSION=', md.version('quart')); \
          print('WERKZEUG_VERSION=', md.version('Werkzeug'))" || true





      # ---------- Bundle + checksum (OS-spezifisch) ----------
      # Linux + macOS: zip/sha sind vorhanden
      - name: Make bundle (unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p bundle/frontend_dist
          cp backend/dist/*bandit-server* bundle/
          cp -R frontend/dist/* bundle/frontend_dist/
          cd bundle
          zip -r "../bandit-local-${{ matrix.os_tag }}.zip" .
          cd ..
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            shasum -a 256 "bandit-local-${{ matrix.os_tag }}.zip" > "SHA256SUMS-${{ matrix.os_tag }}.txt"
          else
            sha256sum "bandit-local-${{ matrix.os_tag }}.zip" > "SHA256SUMS-${{ matrix.os_tag }}.txt"
          fi

      # Windows: nutze PowerShell Compress-Archive + CertUtil f√ºr SHA256
      - name: Make bundle (windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path bundle\frontend_dist | Out-Null
          Copy-Item -Path backend\dist\*bandit-server* -Destination bundle\ -Force
          Copy-Item -Path frontend\dist\* -Destination bundle\frontend_dist\ -Recurse -Force
          if (Test-Path "bandit-local-${{ matrix.os_tag }}.zip") { Remove-Item "bandit-local-${{ matrix.os_tag }}.zip" -Force }
          Compress-Archive -Path bundle\* -DestinationPath "bandit-local-${{ matrix.os_tag }}.zip" -Force
          # SHA256 erzeugen im Format "<hash>  file"
          $hashOut = (& CertUtil -hashfile "bandit-local-${{ matrix.os_tag }}.zip" SHA256) -join "`n"
          $hash = ($hashOut -split "`n" | Where-Object { $_ -match '^[0-9A-F ]+$' } | ForEach-Object { $_ -replace ' ', '' })[0]
          "$hash  bandit-local-${{ matrix.os_tag }}.zip" | Out-File -Encoding ascii "SHA256SUMS-${{ matrix.os_tag }}.txt"

      # ---------- Release erstellen/aktualisieren + Assets hochladen ----------
      - name: Create or update release and upload assets
        uses: ncipollo/release-action@v1
        with:
          tag:  ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          allowUpdates: true
          omitBodyDuringUpdate: true
          artifacts: |
            bandit-local-${{ matrix.os_tag }}.zip
            SHA256SUMS-${{ matrix.os_tag }}.txt
          token: ${{ secrets.GITHUB_TOKEN }}


