name: Build release bundle (backend+frontend)

on:
  push:
    tags: ["v*"]

permissions:
  contents: write

jobs:
  build-bundle:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            os_tag: macos
            py_ver: "3.11"
          - os: windows-latest
            os_tag: windows
            py_ver: "3.11"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---------- Frontend build ----------
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Build frontend
        working-directory: frontend
        run: |
          npm install
          npm run build

      # ---------- Backend (PyInstaller) ----------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py_ver }}

      - name: Build backend binary
        working-directory: backend
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          pyinstaller --onefile --name bandit-server app.py

      # ---------- Bundle + checksum ----------
      - name: Make bundle (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p bundle/frontend_dist
          cp backend/dist/*bandit-server* bundle/
          cp -R frontend/dist/* bundle/frontend_dist/
          cd bundle
          zip -r "../bandit-local-macos.zip" .
          cd ..
          shasum -a 256 "bandit-local-macos.zip" > "SHA256SUMS-macos.txt"

      - name: Make bundle (windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path bundle\frontend_dist | Out-Null
          Copy-Item -Path backend\dist\*bandit-server* -Destination bundle\ -Force
          Copy-Item -Path frontend\dist\* -Destination bundle\frontend_dist\ -Recurse -Force
          if (Test-Path "bandit-local-windows.zip") { Remove-Item "bandit-local-windows.zip" -Force }
          Compress-Archive -Path bundle\* -DestinationPath "bandit-local-windows.zip" -Force
          $hash = (Get-FileHash "bandit-local-windows.zip" -Algorithm SHA256).Hash.ToLower()
          "$hash  bandit-local-windows.zip" | Out-File -Encoding ascii "SHA256SUMS-windows.txt"

      # ---------- Electron Desktop Installer ----------
      - name: Find Electron project dir
        id: find-electron
        shell: bash
        run: |
          set -euo pipefail
          CANDS=("desktop" "app" "electron" ".")
          FOUND=""
          for d in "${CANDS[@]}"; do
            if [ -f "$d/package.json" ]; then
              if jq -e '.main or (.devDependencies.electron // .dependencies.electron)' "$d/package.json" >/dev/null 2>&1; then
                FOUND="$d"; break
              fi
            fi
          done
          echo "dir=$FOUND" >> "$GITHUB_OUTPUT"
          if [ -z "$FOUND" ]; then
            echo "No Electron project found. Skipping installer build."
          else
            echo "Found Electron project at: $FOUND"
          fi

      - name: Install desktop dependencies
        if: steps.find-electron.outputs.dir != ''
        working-directory: ${{ steps.find-electron.outputs.dir }}
        run: |
          npm install

      - name: Build Electron installer
        if: steps.find-electron.outputs.dir != ''
        working-directory: ${{ steps.find-electron.outputs.dir }}
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: "false"
        run: |
          npm run build

      - name: Rename installer (windows)
        if: steps.find-electron.outputs.dir != '' && runner.os == 'Windows'
        shell: powershell
        working-directory: ${{ steps.find-electron.outputs.dir }}
        run: |
          $exe = Get-ChildItem -Path dist -Filter *.exe | Select-Object -First 1
          if (-not $exe) { throw "No .exe produced in dist/" }
          Move-Item $exe.FullName "$PWD\Bandit-Setup-Windows.exe" -Force

      - name: Rename installer (macOS)
        if: steps.find-electron.outputs.dir != '' && runner.os == 'macOS'
        shell: bash
        working-directory: ${{ steps.find-electron.outputs.dir }}
        run: |
          set -euo pipefail
          DMG=$(ls dist/*.dmg | head -n1 || true)
          if [ -z "$DMG" ]; then echo "No .dmg produced in dist/"; exit 1; fi
          mv "$DMG" "Bandit-macOS.dmg"

      # ---------- Upload Assets ----------
      - name: Upload assets (Windows)
        if: runner.os == 'Windows'
        uses: ncipollo/release-action@v1
        with:
          tag:  ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          makeLatest: true
          allowUpdates: true
          omitBodyDuringUpdate: true
          artifactErrorsFailBuild: false
          artifacts: |
            bandit-local-windows.zip
            SHA256SUMS-windows.txt
            ${{ steps.find-electron.outputs.dir && 'desktop/Bandit-Setup-Windows.exe' || '' }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload assets (macOS)
        if: runner.os == 'macOS'
        uses: ncipollo/release-action@v1
        with:
          tag:  ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          makeLatest: true
          allowUpdates: true
          omitBodyDuringUpdate: true
          artifactErrorsFailBuild: false
          artifacts: |
            bandit-local-macos.zip
            SHA256SUMS-macos.txt
            ${{ steps.find-electron.outputs.dir && 'desktop/Bandit-macOS.dmg' || '' }}
          token: ${{ secrets.GITHUB_TOKEN }}

  # ------------ README automatisch mit Installer-Links aktualisieren ------------
  update-readme:
    needs: build-bundle
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout default branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build downloads block
        run: |
          OWNER_REPO="${GITHUB_REPOSITORY}"
          cat > /tmp/downloads.md <<'MD'
          ### ðŸ“¥ Downloads (always latest)

          - **Windows** â€“ [Bandit-Setup-Windows.exe](https://github.com/${OWNER_REPO}/releases/latest/download/Bandit-Setup-Windows.exe)
          - **macOS** â€“ [Bandit-macOS.dmg](https://github.com/${OWNER_REPO}/releases/latest/download/Bandit-macOS.dmg)

          > CI Bundles (for internal pipeline):  
          > - [bandit-local-windows.zip](https://github.com/${OWNER_REPO}/releases/latest/download/bandit-local-windows.zip)  
          > - [bandit-local-macos.zip](https://github.com/${OWNER_REPO}/releases/latest/download/bandit-local-macos.zip)
          MD
          sed -i "s|\${OWNER_REPO}|${OWNER_REPO}|g" /tmp/downloads.md

      - name: Replace block in README
        run: |
          awk '
            BEGIN{start="<!-- DOWNLOADS:START -->"; end="<!-- DOWNLOADS:END -->"; in=0}
            $0~start{print; system("cat /tmp/downloads.md"); in=1; next}
            $0~end{in=0}
            !in{print}
          ' README.md > README.tmp && mv README.tmp README.md

      - name: Commit README if changed
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if ! git diff --quiet README.md; then
            git add README.md
            git commit -m "docs(README): update latest installer links [skip ci]"
            git push
          else
            echo "README unchanged."
          fi
